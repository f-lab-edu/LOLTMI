# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle
#
name: Auto deploy to NCP

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # JDK 21 설치
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'

      # SECRET_YML 파일 생성
    - name: Make application-secret.yml
      run: |
        cd ./common/src/main/resources # resources 폴더로 이동
        touch ./application-common.yaml # application.yml 생성
        echo "${{ secrets.COMMON_YML }}" > ./application-common.yaml

        cd /home/runner/work/LOLTMI/LOLTMI
        cd ./batch/src/main/resources
        touch ./application-secret.yml # application.yml 생성
        echo "${SECRET_YML_BATCH}" > ./application-secret.yml
      env:
        SECRET_YML_BATCH: ${{ secrets.SECRET_YML_BATCH }}
        
    # Gradle Build를 위한 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    # Gradle Build (test 제외)
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # DockerHub 로그인
    - name: DockerHub Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # Docker 이미지 빌드
    - name: Docker Image Build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} .

    # DockerHub Push
    - name: DockerHub Push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

    # batch.jar scp 전송
    # - name: copy file via ssh password
    #   uses: appleboy/scp-action@v0.1.7
    #   with:
    #     host: ${{ secrets.NCP_HOST }}
    #     username: ${{ secrets.NCP_USERNAME }}
    #     password: ${{ secrets.NCP_PASSWORD }}
    #     port: ${{ secrets.NCP_PORT }}
    #     source: "./batch/build/libs/batch-0.0.1-SNAPSHOT.jar"
    #     target: "/root/jenkins/workspace/spring-batch"
    #     strip_components: 4
        
  deploy:
    # needs를 통해 build job이 수행 성공시에 작업되도록 설정
    needs: build
    runs-on: ubuntu-latest

    steps:
    # NCP 로그인 / docker image pull & run
    - name: NCP login and docker image pull and run
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ${{ secrets.AWS_USERNAME }}
        key: ${{ secrets.AWS_KEY }}
        script: |
          sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          sudo docker rm -f loltmi-app
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
          sudo docker run -d -p 8081:8080 --name loltmi-app ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}
          # sudo docker image prune -f
   

